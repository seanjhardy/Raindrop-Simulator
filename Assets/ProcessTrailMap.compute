// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#pragma kernel DrawBlack
#pragma kernel AddRain
#pragma kernel Draw
#pragma kernel ResetMap

struct Raindrop{
    float2 pos;
    float2 vel;
    float mass;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Raindrop> rain;
RWTexture2D<float4> dataMap;
RWTexture2D<float4> nextDataMap; 
RWTexture2D<float4> viewMap;
RWTexture2D<float4> noiseMap;

int numDrops;
int width;
int height;
RWStructuredBuffer<float> debugVals;

static const float PI = 3.14159265f;
static const float g = 0.1f;

float random (float2 st) {
    return frac(sin(dot(st.xy, float2(12.9898,78.233)))*43758.5453123);
}

float sigmoid(float x) {
    return 1.0 / (1 + exp(-x));
}

//Add the velocity to the drop at index (x,y)
void addVel(int x, int y, float2 vel) {
    float4 drop = nextDataMap[int2(x, y)];
    nextDataMap[int2(x, y)] = float4(drop.x + vel.x, drop.y + vel.y, drop.z, drop.w);
}

//Add mass to the drop at index (x, y)
void addMass(int x, int y, float mass) {
    float4 drop = nextDataMap[int2(x, y)];
    nextDataMap[int2(x,y)] = float4(drop.x, drop.y, drop.z + mass, drop.w);
}

void setPosInCell(int x, int y, float posInCell) {
    float4 drop = nextDataMap[int2(x, y)];
    nextDataMap[int2(x, y)] = float4(drop.x, drop.y, drop.z, max(posInCell, drop.w));
}

[numthreads(8,8,1)]
void DrawBlack (uint3 id : SV_DispatchThreadID){
    viewMap[id.xy] = float4(0, 0, 0, 1.0);
}

[numthreads(1, 1, 1)]
void AddRain(uint3 id : SV_DispatchThreadID) {
    Raindrop drop = rain[id.x];

    dataMap[drop.pos] = float4(drop.vel.x, drop.vel.y, drop.mass, 0.0);
}


[numthreads(16,16,1)]
void Update(uint3 id  : SV_DispatchThreadID) {
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
        return;
    }

    float4 drop = dataMap[id.xy];
    float m = drop.z; //mass of drop
    float posInCell = drop.w;

    if (m == 0) {
        return;
    }
    
    float2 vel = float2(drop.x, drop.y); //momentum of drop
    float2 gravity = float2(0, m * g); //gravity
    
    //friction
    float mu = noiseMap[id.xy]; //coefficient of friction
    float2 staticFriction = float2(0, 0);
    float2 dynamicFriction = float2(0, 0);
    float speed = sqrt(pow(vel.x, 2) + pow(vel.y, 2));

    //static friction
    if (m * sigmoid(speed) * 0.8 <= mu) {
        staticFriction = float2(0, -g * m);
    }
    //dynamic friction
    else {
        dynamicFriction = float2(0, -mu * m * g * 0.1);
    }
    //velocity friction force
    if (vel.x > 0 || vel.y > 0) {
        dynamicFriction += float2(-vel.x * mu, -vel.y * mu);
    }
    

    float2 newVel = vel + gravity + staticFriction + dynamicFriction;

    speed = sqrt(pow(newVel.x, 2) + pow(newVel.y, 2));

    float angle = atan2(newVel.y, newVel.x);

    //find node to move to
    float maxScore = -100;
    float maxX = 0, maxY = -1;
    for (int x = -1; x < 2; x++) {
        for (int y = -1; y < 2; y++) {
            if (x == 0 && y == 0) {
                continue;
            }
            if (id.x + x >= 0 && id.x + x < width && id.y + y >= 0 && id.y + y < height) {
                //Bias score by least resistive path
                float score = -noiseMap[int2(id.x + x, id.y + y)].x;

                //Bias towards path with water
                score += nextDataMap[int2(id.x + x, id.y + y)].z * 5;

                //Choose routes in line with momentum
                //score -= abs(angle - atan2(y, x)) * 0.01;

                score -= y*0.2;

                if (score >= maxScore) {
                    maxScore = score;
                    maxX = x;
                    maxY = y;
                }
            }
        }
    }


    if (m <= 0.9) {
        m *= 0.99;
    }
    if (m <= 0.01) {
        m = 0;
    }


    posInCell += speed;
    debugVals[0] = newVel.x;
    debugVals[1] = newVel.y;

    if (posInCell >= 1.0) {
        //set current cell
        addMass(id.x, id.y, m * 0.5);
        addVel(id.x, id.y, float2(newVel.x*0.2, newVel.y*0.2));
        setPosInCell(id.x, id.y, posInCell - 1.0);

        //Set values for next cell
        float oldM = nextDataMap[int2(id.x + maxX, id.y + maxY)].z;
        addMass(id.x + maxX, id.y + maxY, m);
        addVel(id.x + maxX, id.y + maxY, newVel);
        //addVel(id.x + maxX, id.y + maxY, float2(maxX * 0.01, maxY * 0.01));
    }else {
        addMass(id.x, id.y, m);
        addVel(id.x, id.y, newVel);
        setPosInCell(id.x, id.y, posInCell);
    }
}

[numthreads(16, 16, 1)]
void Draw(uint3 id  : SV_DispatchThreadID) {
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
        return;
    }
    
    float a = nextDataMap[id.xy].z;
    viewMap[id.xy] = float4(a, a, a, 1.0);
}

[numthreads(16, 16, 1)]
void ResetMap(uint3 id  : SV_DispatchThreadID) {
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
        return;
    }

    dataMap[id.xy] = float4(0, 0, 0, 0);
}

